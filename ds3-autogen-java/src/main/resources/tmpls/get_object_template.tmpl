/*
 * ******************************************************************************
 *   Copyright 2014-2015 Spectra Logic Corporation. All Rights Reserved.
 *   Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *   this file except in compliance with the License. A copy of the License is located at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file.
 *   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *   CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *   specific language governing permissions and limitations under the License.
 * ****************************************************************************
 */

// This code is auto-generated, do not modify

package ${packageName};

import com.spectralogic.ds3client.HttpVerb;
<#list imports as import>
import ${import};
</#list>
import org.apache.http.entity.ContentType;
import java.nio.channels.WritableByteChannel;

public class ${name} extends AbstractRequest {

    public static class Range {
        private final long start;
        private final long end;

        public Range(final long start, final long end) {
            this.start = start;
            this.end = end;
        }

        public long getStart() {
            return this.start;
        }

        public long getEnd() {
            return this.end;
        }
    }

    // Variables
    <#list requiredArguments as arg>
    private final ${arg.getType()} ${arg.getName()?uncap_first};
    </#list>
    <#list optionalArguments as arg>
    private ${arg.getType()} ${arg.getName()?uncap_first};
    </#list>
    private final WritableByteChannel channel;
    private Range byteRange = null;

    // Constructor

    /**
     * @deprecated use {@link #${name}(${javaHelper.argTypeList(requiredArguments)}, ${javaHelper.argTypeList(optionalArguments)}, WritableByteChannel)} instead
     */
    @Deprecated
    public ${name}(${helper.constructorArgs(requiredArguments)}, final WritableByteChannel channel) {
        <#list requiredArguments as arg>
        this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
        </#list>
        this.channel = channel;
    }

    public ${name}(${helper.constructorArgs(requiredArguments)}, ${helper.constructorArgs(optionalArguments)}, final WritableByteChannel channel) {
        <#list requiredArguments as arg>
        this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
        </#list>
        <#list optionalArguments as arg>
        this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
        </#list>
        this.channel = channel;

        this.getQueryParams().put("job", jobId.toString());
        this.getQueryParams().put("offset", Long.toString(offset));
    }

    <#list optionalArguments as arg>
${javaHelper.createWithConstructor(arg, name)}
    </#list>
    public ${name} withByteRange(final Range byteRange) {
        this.byteRange = byteRange;
        if (byteRange != null) {
            this.getHeaders().put("Range", buildRangeHeaderText(byteRange));
        }
        return this;
    }

    private static String buildRangeHeaderText(final Range byteRange) {
        return String.format("bytes=%d-%d", byteRange.getStart(), byteRange.getEnd());
    }

    @Override
    public HttpVerb getVerb() {
        return HttpVerb.${helper.getHttpVerb(verb, action)};
    }

    @Override
    public ContentType getContentType() {
        return ContentType.APPLICATION_OCTET_STREAM;
    }

    @Override
    public String getPath() {
        return ${path};
    }

    <#list requiredArguments as arg>
    public ${arg.getType()} get${arg.getName()?cap_first}() {
        return this.${arg.getName()?uncap_first};
    }

    </#list>
    <#list optionalArguments as arg>
    public ${arg.getType()} get${arg.getName()?cap_first}() {
        return this.${arg.getName()?uncap_first};
    }

    </#list>

    public Range getByteRange() {
        return this.byteRange;
    }

    public WritableByteChannel getChannel() {
        return this.channel;
    }
}