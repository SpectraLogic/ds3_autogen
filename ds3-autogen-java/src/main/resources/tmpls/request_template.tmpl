/*
 * ******************************************************************************
 *   Copyright 2014-2015 Spectra Logic Corporation. All Rights Reserved.
 *   Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *   this file except in compliance with the License. A copy of the License is located at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file.
 *   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *   CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *   specific language governing permissions and limitations under the License.
 * ****************************************************************************
 */

// This code is auto-generated, do not modify

package ${packageName};

import com.spectralogic.ds3client.HttpVerb;
<#list imports as import>
import ${import};
</#list>

public class ${name} extends AbstractRequest {

    // Variables
    <#list requiredArguments as arg>
    final private ${arg.getType()} ${arg.getName()?uncap_first};
    </#list>
    <#list optionalArguments as arg>
    private ${arg.getType()} ${arg.getName()?uncap_first};
    </#list>

    // Constructor
    public ${name}(${helper.constructorArgs(requiredArguments)}) {
        <#list requiredArguments as arg>
        this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
        </#list>
    }

    <#list optionalArguments as arg>
    public ${name} with${arg.getName()?cap_first}(final ${arg.getType()} ${arg.getName()?uncap_first}) {
        this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
        this.updateQueryParam("${helper.camelToUnderscore(arg.getName())}", ${helper.argToString(arg)});
        return this;
    }

    </#list>

    @Override
    public HttpVerb getVerb() {
        return HttpVerb.${helper.getHttpVerb(verb, action)};
    }

    @Override
    public String getPath() {
        return ${path};
    }

    <#list requiredArguments as arg>
    public ${arg.getType()} get${arg.getName()?cap_first}() {
        return this.${arg.getName()?uncap_first};
    }

    </#list>
    <#list optionalArguments as arg>
    public ${arg.getType()} get${arg.getName()?cap_first}() {
        return this.${arg.getName()?uncap_first};
    }

    </#list>
}