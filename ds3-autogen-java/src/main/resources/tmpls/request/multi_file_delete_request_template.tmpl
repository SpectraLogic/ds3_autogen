<#include "../copyright.tmpl"/>

package ${packageName};

<#include "import_abstract_request.tmpl"/>
import com.spectralogic.ds3client.HttpVerb;
import com.spectralogic.ds3client.models.Contents;
import com.spectralogic.ds3client.models.delete.Delete;
import com.spectralogic.ds3client.models.delete.DeleteObject;
import com.spectralogic.ds3client.serializer.XmlOutput;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
<#include "../imports.tmpl"/>

public class ${name} extends AbstractRequest {

    // Variables
    private final List<String> objects;
<#include "variables.tmpl"/>
    private boolean quiet = false;
    private long size;

    // Constructor
    public ${name}(${javaHelper.constructorArgs(
                         javaHelper.addArgument(
                             javaHelper.removeVoidArguments(requiredArguments), "Objects", "List<String>"))}) {
        <#list javaHelper.removeVoidArguments(requiredArguments) as arg>
        this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
        </#list>
        this.objects = objects;
<#include "constructor_get_query_params.tmpl"/>
    }

    public ${name}(${javaHelper.constructorArgs(javaHelper.addArgument(javaHelper.removeArgument(requiredArguments, "Delete"), "Objs", "Iterable<Contents>"))}) {
        this(${javaHelper.argsToList(javaHelper.removeArgument(requiredArguments, "Delete"))}, contentsToString(objs));
    }

    private static List<String> contentsToString(final Iterable<Contents> objs) {
        final List<String> objKeyList = new ArrayList<>();
        for (final Contents obj : objs) {
            objKeyList.add(obj.getKey());
        }
        return objKeyList;
    }

    <#include "with_constructors.tmpl"/>

    public ${name} withQuiet(final boolean quiet) {
        this.quiet = quiet;
        return this;
    }

    @Override
    public InputStream getStream() {

        final Delete delete = new Delete();
        delete.setQuiet(quiet);
        final List<DeleteObject> deleteObjects = new ArrayList<>();

        for(final String objName : objects) {
            deleteObjects.add(new DeleteObject(objName));
        }

        delete.setDeleteObjectList(deleteObjects);

        final String xmlOutput = XmlOutput.toXml(delete);
        final byte[] stringBytes = xmlOutput.getBytes();
        this.size = stringBytes.length;

        return new ByteArrayInputStream(stringBytes);
    }

    <#include "getters_verb_path.tmpl"/>

    ${javaHelper.createGetter("Objects", "List<String>")}

    ${javaHelper.createGetter("Quiet", "boolean")}

<#include "getters.tmpl"/>

    @Override
    ${javaHelper.createGetter("Size", "long")}
}