<#include "../copyright.tmpl"/>

package ${packageName};

import com.spectralogic.ds3client.HttpVerb;
import com.spectralogic.ds3client.models.Checksum;
import java.io.InputStream;
import java.nio.channels.SeekableByteChannel;
<#include "../imports.tmpl"/>

public class ${name} extends AbstractRequest {

    // Variables
    public final static string AMZ_META_HEADER = "x-amz-meta-";

    private final SeekableByteChannel channel;
    private final InputStream stream;
    private final long size;
    <#include "variables.tmpl"/>
    private Checksum checksum = Checksum.none();

    // Constructor

    /**
     * @deprecated use {@link #${name}(${javaHelper.argTypeList(javaHelper.addArgument(javaHelper.addArgument(javaHelper.addArgument(requiredArguments, optionalArguments), "Size", "long"), "Channel", "SeekableByteChannel"))}) instead
     */
    @Deprecated
    public ${name}(${javaHelper.constructorArgs(javaHelper.addArgument(javaHelper.addArgument(requiredArguments, "Size", "long"), "Channel", "SeekableByteChannel"))}) {
        <#list requiredArguments as arg>
        this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
        </#list>
        this.size = size;
        this.channel = channel;
        this.stream = new SeekableByteChannelInputStream(channel);
    }

    public ${name}(${javaHelper.constructorArgs(javaHelper.addArgument(javaHelper.addArgument(javaHelper.addArgument(requiredArguments, optionalArguments), "Size", "long"), "Channel", "SeekableByteChannel"))}) {
        this.channel = channel;
        this.stream = new SeekableByteChannelInputStream(channel);

        ${name}(${javaHelper.modifiedArgNameList(
            javaHelper.addArgument(
                javaHelper.addArgument(
                    javaHelper.addArgument(
                        requiredArguments, optionalArguments), "Size", "long"), "Stream", "InputStream"), "Stream", "this.stream")});
    }

    public ${name}(${javaHelper.constructorArgs(javaHelper.addArgument(javaHelper.addArgument(javaHelper.addArgument(requiredArguments, optionalArguments), "Size", "long"), "Stream", "InputStream"))}) {
            <#list requiredArguments as arg>
            this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
            </#list>
            <#list optionalArguments as arg>
            this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
            </#list>
            this.size = size;
            this.stream = stream;

            <#list optionalArguments as arg>
            ${javaHelper.putQueryParamLine(arg)}
            </#list>
        }

    <#include "with_constructors.tmpl"/>

    public PutObjectRequest withChecksum(final Checksum checksum) {
        this.checksum = checksum;
        return this;
    }

	public PutObjectRequest withMetaData(final String key, final String value) {
		final String modifiedKey;
		if (!key.toLowerCase().startsWith(AMZ_META_HEADER)){
			modifiedKey = AMZ_META_HEADER + key;
		} else {
			modifiedKey = key;
		}
		this.getHeaders().put(modifiedKey, value);
		return this;
	}

    <#include "getters_verb_path.tmpl"/>

    @Override
    ${javaHelper.createGetter("Checksum", "Checksum")}

    @Override
    ${javaHelper.createGetter("Size", "long")}

    @Override
    ${javaHelper.createGetter("Stream", "InputStream")}

    <#include "getters.tmpl"/>

    ${javaHelper.createGetter("Channel", "SeekableByteChannel")}
}