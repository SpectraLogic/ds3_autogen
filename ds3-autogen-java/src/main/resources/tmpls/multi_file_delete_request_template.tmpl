/*
 * ******************************************************************************
 *   Copyright 2014-2015 Spectra Logic Corporation. All Rights Reserved.
 *   Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *   this file except in compliance with the License. A copy of the License is located at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file.
 *   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *   CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *   specific language governing permissions and limitations under the License.
 * ****************************************************************************
 */

// This code is auto-generated, do not modify

package ${packageName};

import com.spectralogic.ds3client.HttpVerb;
<#list imports as import>
import ${import};
</#list>

public class ${name} extends AbstractRequest {

    // Variables
    private final List<String> objects;
    <#list javaHelper.removeArgument(requiredArguments, "Delete") as arg>
    private final ${helper.getType(arg)} ${arg.getName()?uncap_first};
    </#list>
    <#list optionalArguments as arg>
    private ${helper.getType(arg)} ${arg.getName()?uncap_first};
    </#list>
    private boolean quiet = false;

    // Constructor
    public ${name}(${helper.constructorArgs(javaHelper.removeArgument(requiredArguments, "Delete"))}, final List<String> objects) {
        <#list javaHelper.removeArgument(requiredArguments, "Delete") as arg>
        this.${arg.getName()?uncap_first} = ${arg.getName()?uncap_first};
        </#list>
        this.objects = objects;
        this.getQueryParams().put("delete", null);
    }

    public ${name}(${helper.constructorArgs(javaHelper.removeArgument(requiredArguments, "Delete"))}, final Iterable<Contents> objs) {
        this(${javaHelper.argsToList(javaHelper.removeArgument(requiredArguments, "Delete"))}, contentsToString(objs));
    }

    <#list optionalArguments as arg>
${javaHelper.createWithConstructor(arg, name)}
    </#list>

    public ${name} withQuiet(final boolean quiet) {
        this.quiet = quiet;
        return this;
    }

    @Override
    public InputStream getStream() {

        final Delete delete = new Delete();
        delete.setQuiet(quiet);
        final List<DeleteObject> deleteObjects = new ArrayList<>();

        for(final String objName : objects) {
            deleteObjects.add(new DeleteObject(objName));
        }

        delete.setDeleteObjectList(deleteObjects);

        final String xmlOutput = XmlOutput.toXml(delete);
        final byte[] stringBytes = xmlOutput.getBytes();
        this.size = stringBytes.length;

        return new ByteArrayInputStream(stringBytes);
    }

    @Override
    public HttpVerb getVerb() {
        return HttpVerb.${helper.getHttpVerb(verb, action)};
    }

    @Override
    public String getPath() {
        return ${path};
    }

    @Override getSize() {
        return this.size;
    }

    public List<String> getObjects() {
        return objects;
    }

    public boolean getQuiet() {
        return quiet;
    }

    <#list javaHelper.removeArgument(requiredArguments, "Delete") as arg>
    public ${helper.getType(arg)} get${arg.getName()?cap_first}() {
        return this.${arg.getName()?uncap_first};
    }

    </#list>
    <#list optionalArguments as arg>
    public ${helper.getType(arg)} get${arg.getName()?cap_first}() {
        return this.${arg.getName()?uncap_first};
    }

    </#list>
}